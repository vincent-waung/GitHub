@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts{
    <script src="~/Scripts/processingajaxmsg.js"></script>
    <script src="~/Scripts/xzUtil.js"></script>
}



<script type="text/javascript">
    var dgBooking;
    var searchForm;
    var searchcolumns = [];
    var allcolumns = [

                { field: 'Status', title: 'Status', width: 100 },
                { field: 'FOB_LOG', title: 'LOG', width: 100 },
                { field: 'Vendor_Name', title: 'Vendor Name', width: 100 },
                 { field: 'Mfr_Name1', title: 'Mfr Name', width: 120 },
                { field: 'FOB_Customer_Name', title: 'Customer Name', width: 220 },
                { field: 'FOB_Customer_PO', title: 'Customer PO(2)', width: 100 },
                 {
                     field: 'FOB_First_Date', title: 'First Date', width: 120, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
                 {
                     field: 'FOB_Cancel_Date', title: 'Cancel Date', width: 120, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
                { field: 'SalesOrd_STO', title: 'SalesOrd/STO (1)', width: 100 },
                { field: 'ItemNO', title: 'ItemNO (1)', width: 100 },
                { field: 'Sales_Material', title: 'Sales Material (7)', width: 100 },
                { field: 'Material', title: 'Material', width: 100 },

                 { field: 'Matl_Group', title: 'Matl Group', width: 120 },
                { field: 'Short_text', title: 'Short text(8)', width: 100 },
                { field: 'Purch_Doc', title: 'Purch Doc.', width: 100 },
                 { field: 'Item', title: 'Item', width: 100 },
                { field: 'PO_quantity', title: 'PO quantity', width: 100 },
                { field: 'Total_Carton', title: 'Total Carton', width: 100 },
                { field: 'Total_GrossWeight', title: 'Total Gross Weight (Metric)', width: 150 },
                { field: 'FOB_Total_NetWeight', title: 'Total Net Weight (Metric)', width: 100 },
                { field: 'Total_Volume', title: 'Total Volume (Metric)', width: 150 },

                //polist
                 { field: 'Booking_No', title: 'Booking No.', width: 100 },
                 {
                     field: 'Booking_Date', title: 'Booking Date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },

                 {
                     field: 'SO_Release_Date', title: 'SO Release Date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
                 {
                     field: 'OpenDate', title: 'CFS/CY Open Date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },

               {
                   field: 'CY_Closing_Date', title: 'CFS/CY Closing date', width: 100, formatter: function (value) {
                       if (value) {
                           if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                               return '';
                           } else {

                               return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                           }
                       }
                   }
               },
                 {
                     field: 'Loading_Date', title: 'Loading date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },



                {
                    field: 'ETD', title: 'ETD', width: 100, formatter: function (value) {
                        if (value) {
                            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                return '';
                            } else {

                                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                            }
                        }
                    }
                },

                {
                    field: 'Shipment_Status', title: 'Shipment Status', width: 100
                },

                 {
                     field: 'Trucking_Arrive_terminal_Date', title: 'Actual Arrive in terminal Date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
                 {
                     field: 'Trucking_Arrive_WHS_Date', title: 'Actual Arrive in WHS Date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
                 { field: 'ShipMode', title: 'Ship Mode', width: 100 },
                { field: 'FOB_Customer_Material_Number', title: 'Customer Material Number (9)', width: 150 },
                 {
                     field: 'Deliv_Date', title: 'Deliv. Date', width: 120, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
               { field: 'Delivery_Number', title: 'Delivery Number', width: 100 },
               {
                   field: 'Inspection_End_Date', title: 'Inspection End Date ', width: 100, formatter: function (value) {
                       if (value) {
                           if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                               return '';
                           } else {

                               return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                           }
                       }
                   }
               },

                { field: 'Inspection_Result', title: 'Inspection result', width: 120 },
                { field: 'Qty_Delivered', title: 'Delivery Quantity', width: 100 },
                 { field: 'Delivery_CBM', title: 'Delivery CBM', width: 100 },
                 { field: 'Carton_delivered', title: 'Delivery Carton', width: 100 },
                 { field: 'Loading_Port', title: 'Loading Port', width: 100 },
                 //{ field: 'Vessel', title: 'Vessel', width: 100 },
                 //{ field: 'Voyage', title: 'Voyage', width: 100 },
                   //{
                   //    field: 'SI_Cut_Time', title: 'SI Cut Off Date', width: 100, formatter: function (value) {
                   //        if (value) {
                   //            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                   //                return '';
                   //            } else {

                   //                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                   //            }
                   //        }
                   //    }
                   //},


                 { field: 'Dischaging_Port', title: 'Discharging Port', width: 100 },

                 { field: 'Container_NO', title: 'Container NO', width: 100 },
                 { field: 'Seal_NO', title: 'Seal NO', width: 100 },

                 //{ field: 'Vehicle_Type', title: 'Vehicle Type', width: 100 },
        { field: 'TruckingNo', title: 'Plate number', width: 100 },
        { field: 'CTN', title: 'Delivery CTN.in truck', width: 100 },
        { field: 'CBM', title: 'Delivery CBM.in truck', width: 100 },
        { field: 'Qty', title: 'Delivery Quantity.in truck', width: 100 },
        { field: 'Courier_tracking_no', title: 'FCR OR OB Courier tracking no.', width: 100 },

                 { field: 'Mohth', title: 'Mohth', width: 100 },
                 { field: 'Weekly', title: 'Weekly', width: 100 },
                 { field: 'CustomerType', title: 'Customer Type', width: 100 },
                {
                    field: 'FOB_Local_Charges_Settlement', title: 'FOB local charges settlement', width: 200
                },

                  {
                      field: 'FCR_Bill_Return_Date', title: 'FCR/Bill of Loading return to SM ', width: 180, formatter: function (value) {
                          if (value) {
                              if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                  return '';
                              } else {

                                  return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                              }
                          }
                      }
                  },

                  {
                      field: 'Certificate_Application_Date', title: 'Certificate Application Date', width: 200, formatter: function (value) {
                          if (value) {
                              return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();
                          }
                      }
                  },

                {
                    field: 'Certificate_Return_TO_SMDate', title: 'Certificate return to SM Date', width: 200, formatter: function (value) {
                        if (value) {
                            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                return '';
                            } else {

                                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                            }
                        }
                    }
                },
                {
                    field: 'To_be_del', title: 'To be del.', width: 100
                },




               { field: 'Delay_Details', title: 'Delay Details', width: 120 },
                {
                    field: 'Brand', title: 'Brand', width: 100
                },
                { field: 'Carton_Depth_W', title: 'Carton Depth-W (Metric).', width: 150 },
                { field: 'Carton_GrossWeight', title: 'Carton Gross Weight (Metric)', width: 150 },
                { field: 'Carton_Height', title: 'Carton Height (Metric)', width: 150 },
                { field: 'Carton_NetWeight', title: 'Carton Net Weight (Metric)', width: 150 },
                { field: 'Carton_PCS', title: 'Carton PCS (4)', width: 100 },
                { field: 'Carton_Width_L', title: 'Carton Width-L (Metric)', width: 150 },
                { field: 'FOB_Carton_Volume', title: 'Carton Volume (Metric)', width: 150 },
                { field: 'Comments', title: 'Comments', width: 100 },
                 { field: 'Mfr_Country', title: 'Mfr Country', width: 120 },
               { field: 'ShipTo_Name', title: 'Ship To Name', width: 120 },
                {
                    field: 'Ship_To_Country  ', title: 'Ship To Country', width: 220
                },
                { field: 'FOB_Customer_Description', title: 'Customer Description (10)', width: 150 },
                { field: 'FOB_MainBatt', title: 'MainBatt', width: 100 },
                { field: 'FOB_MainBattQty', title: 'MainBattQty', width: 100 },
                { field: 'FOB_OverallCredStat', title: 'OverallCredStat', width: 100 },
                { field: 'FOB_Proforma_Invoice', title: 'Proforma Invoice', width: 100 },
                { field: 'DOM_Domestic_Dest', title: 'Domestic_Dest.', width: 100 },
                { field: 'DOM_Vendor', title: 'Vendor', width: 100 },
                { field: 'DOM_Sloc', title: 'Sloc', width: 100 },
                { field: 'Packing_Status', title: 'Packing Status', width: 100 },
                {
                    field: 'DOM_STO_Delivery_Date', title: 'STO Delivery Date', width: 100, formatter: function (value) {
                        if (value) {
                            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                return '';
                            } else {

                                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                            }
                        }
                    }
                },
                {
                    field: 'DOM_STO_MA_Date', title: 'STO MA Date', width: 100, formatter: function (value) {
                        if (value) {
                            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                return '';
                            } else {

                                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                            }
                        }
                    }
                },

                { field: 'DOM_Mfr_City', title: 'Mfr City', width: 100 },
                { field: 'DOM_Route', title: 'Route', width: 100 },
                { field: 'DOM_Shipment_Number', title: 'Shipment Number', width: 100 },
                {
                    field: 'DOM_StatDelD', title: 'StatDelD', width: 100, formatter: function (value) {
                        if (value) {
                            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                return '';
                            } else {

                                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                            }
                        }
                    }
                },

                { field: 'DOM_Inbound', title: 'Inbound', width: 100 },
                { field: 'DOM_Invoice', title: 'Invoice', width: 100 },
                { field: 'DOM_To_Be_Del', title: 'DOM To be del.', width: 100 },
                { field: 'DOM_Finaloadingport', title: 'Finaloadingport.', width: 100 },


                 { field: 'Created_By', title: 'Created by', width: 100 },


                { field: 'FOB_Receiving_Point', title: 'Receiving Point', width: 100 },


               


                 
                //{ field: 'Matl_Group_Sales', title: 'Matl Group Sales', width: 100 },
                

              



              // { field: 'DOM_Domestic_Dest', title: 'Domestic Dest.', width: 100 },




                     //ALL



                

                //FOB
    
    


                //DOM
                //{ field: 'DOM_Qty_Delivered', title: 'DOM Qty delivered', width: 100 },





           
                
                
    ]
    $(function () {


        $('#ddlLine').combotree({
            valueField: "field", //Value字段
            textField: "text", //Text字段
            multiple: true,
            editable: true,
            prompt: 'Please choose',
            onBeforeSelect:function(node){checkLeaf(node);},
            onSelect: function (node) { initClient(node) },
            onLoadSuccess: function () {
                $('#ddlLine').combotree('tree').tree("collapseAll");	 //全部关闭
                $(".tree-icon,.tree-file").removeClass("tree-icon tree-file");//去掉最后一级图标
                $(".tree-icon,.tree-folder").removeClass("tree-icon tree-folder tree-folder-open tree-folder-closed");//去掉所有父级图标
            },
            data: [
                { id: 1, field: 'Choose_all', text: 'Choose all', width: 100 },

                { field: 'Status', text: 'Status', width: 100 },
                { field: 'FOB_LOG', text: 'LOG', width: 100 },
                { field: 'Vendor_Name', text: 'Vendor Name', width: 100 },
                 { field: 'Mfr_Name1', text: 'Mfr Name', width: 120 },
                { field: 'FOB_Customer_Name', text: 'Customer Name', width: 220 },
                { field: 'FOB_Customer_PO', text: 'Customer PO(2)', width: 100 },
                 {
                     field: 'FOB_First_Date', text: 'First Date', width: 120, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
                 {
                     field: 'FOB_Cancel_Date', text: 'Cancel Date', width: 120, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
                { field: 'SalesOrd_STO', text: 'SalesOrd/STO (1)', width: 100 },
                { field: 'ItemNO', text: 'ItemNO (1)', width: 100 },
                { field: 'Sales_Material', text: 'Sales Material (7)', width: 100 },
                { field: 'Material', text: 'Material', width: 100 },

                 { field: 'Matl_Group', text: 'Matl Group', width: 120 },
                { field: 'Short_text', text: 'Short text(8)', width: 100 },
                { field: 'Purch_Doc', text: 'Purch Doc.', width: 100 },
                 { field: 'Item', text: 'Item', width: 100 },
                { field: 'PO_quantity', text: 'PO quantity', width: 100 },
                { field: 'Total_Carton', text: 'Total Carton', width: 100 },
                { field: 'Total_GrossWeight', text: 'Total Gross Weight (Metric)', width: 150 },
                { field: 'FOB_Total_NetWeight', text: 'Total Net Weight (Metric)', width: 100 },
                { field: 'Total_Volume', text: 'Total Volume (Metric)', width: 150 },

                //polist
                 { field: 'Booking_No', text: 'Booking No.', width: 100 },
                 {
                     field: 'Booking_Date', text: 'Booking Date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },

                 {
                     field: 'SO_Release_Date', text : 'SO Release Date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
                 {
                     field: 'OpenDate', text: 'CFS/CY Open Date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },

               {
                   field: 'CY_Closing_Date', text: 'CFS/CY Closing date', width: 100, formatter: function (value) {
                       if (value) {
                           if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                               return '';
                           } else {

                               return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                           }
                       }
                   }
               },
                 {
                     field: 'Loading_Date', text: 'Loading date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },



                {
                    field: 'ETD', text: 'ETD', width: 100, formatter: function (value) {
                        if (value) {
                            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                return '';
                            } else {

                                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                            }
                        }
                    }
                },

                {
                    field: 'Shipment_Status', text: 'Shipment Status', width: 100
                },

                 {
                     field: 'Trucking_Arrive_terminal_Date', text: 'Actual Arrive in terminal Date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
                 {
                     field: 'Trucking_Arrive_WHS_Date', text: 'Actual Arrive in WHS Date', width: 100, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
                 { field: 'ShipMode', text: 'Ship Mode', width: 100 },
                { field: 'FOB_Customer_Material_Number', text: 'Customer Material Number (9)', width: 150 },
                 {
                     field: 'Deliv_Date', text: 'Deliv. Date', width: 120, formatter: function (value) {
                         if (value) {
                             if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                 return '';
                             } else {

                                 return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                             }
                         }
                     }
                 },
               { field: 'Delivery_Number', text: 'Delivery Number', width: 100 },
               {
                   field: 'Inspection_End_Date', text: 'Inspection End Date ', width: 100, formatter: function (value) {
                       if (value) {
                           if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                               return '';
                           } else {

                               return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                           }
                       }
                   }
               },

                { field: 'Inspection_Result', text: 'Inspection result', width: 120 },
                { field: 'Qty_Delivered', text: 'Delivery Quantity', width: 100 },
                 { field: 'Delivery_CBM', text: 'Delivery CBM', width: 100 },
                 { field: 'Carton_delivered', text: 'Delivery Carton', width: 100 },
                 { field: 'Loading_Port', text: 'Loading Port', width: 100 },
                 //{ field: 'Vessel', text: 'Vessel', width: 100 },
                 //{ field: 'Voyage', text: 'Voyage', width: 100 },
                   //{
                   //    field: 'SI_Cut_Time', text: 'SI Cut Off Date', width: 100, formatter: function (value) {
                   //        if (value) {
                   //            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                   //                return '';
                   //            } else {

                   //                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                   //            }
                   //        }
                   //    }
                   //},


                 { field: 'Dischaging_Port', text: 'Discharging Port', width: 100 },

                 { field: 'Container_NO', text: 'Container NO', width: 100 },
                 { field: 'Seal_NO', text: 'Seal NO', width: 100 },

                //{ field: 'Vehicle_Type', text: 'Vehicle Type', width: 100 },
                { field: 'TruckingNo', text: 'Plate number', width: 100 },
                { field: 'CTN', text: 'Delivery CTN.in truck', width: 100 },
                { field: 'CBM', text: 'Delivery CBM.in truck', width: 100 },
                { field: 'Qty', text: 'Delivery Quantity.in truck', width: 100 },

                 { field: 'Mohth', text: 'Mohth', width: 100 },
                 { field: 'Weekly', text: 'Weekly', width: 100 },
                { field: 'CustomerType', text: 'Customer Type', width: 100 },
                { field: 'Courier_tracking_no', text: 'FCR OR OB Courier tracking no.', width: 100 },
                {
                    field: 'FOB_Local_Charges_Settlement', text: 'FOB local charges settlement', width: 200
                },

                  {
                      field: 'FCR_Bill_Return_Date', text: 'FCR/Bill of Loading return to SM ', width: 180, formatter: function (value) {
                          if (value) {
                              if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                  return '';
                              } else {

                                  return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                              }
                          }
                      }
                  },

                  {
                      field: 'Certificate_Application_Date', text: 'Certificate Application Date', width: 200, formatter: function (value) {
                          if (value) {
                              return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();
                          }
                      }
                  },

                {
                    field: 'Certificate_Return_TO_SMDate', text: 'Certificate return to SM Date', width: 200, formatter: function (value) {
                        if (value) {
                            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                return '';
                            } else {

                                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                            }
                        }
                    }
                },
                {
                    field: 'To_be_del', text: 'To be del.', width: 100
                },




               { field: 'Delay_Details', text: 'Delay Details', width: 120 },
                {
                    field: 'Brand', text: 'Brand', width: 100
                },
                { field: 'Carton_Depth_W', text: 'Carton Depth-W (Metric).', width: 150 },
                { field: 'Carton_GrossWeight', text: 'Carton Gross Weight (Metric)', width: 150 },
                { field: 'Carton_Height', text: 'Carton Height (Metric)', width: 150 },
                { field: 'Carton_NetWeight', text: 'Carton Net Weight (Metric)', width: 150 },
                { field: 'Carton_PCS', text: 'Carton PCS (4)', width: 100 },
                { field: 'Carton_Width_L', text: 'Carton Width-L (Metric)', width: 150 },
                { field: 'FOB_Carton_Volume', text: 'Carton Volume (Metric)', width: 150 },
                { field: 'Comments', text: 'Comments', width: 100 },
                 { field: 'Mfr_Country', text: 'Mfr Country', width: 120 },
               { field: 'ShipTo_Name', text: 'Ship To Name', width: 120 },
                {
                    field: 'Ship_To_Country  ', text: 'Ship To Country', width: 220
                },
                { field: 'FOB_Customer_Description', text: 'Customer Description (10)', width: 150 },
                { field: 'FOB_MainBatt', text: 'MainBatt', width: 100 },
                { field: 'FOB_MainBattQty', text: 'MainBattQty', width: 100 },
                { field: 'FOB_OverallCredStat', text: 'OverallCredStat', width: 100 },
                { field: 'FOB_Proforma_Invoice', text: 'Proforma Invoice', width: 100 },
                { field: 'DOM_Domestic_Dest', text: 'Domestic_Dest.', width: 100 },
                { field: 'DOM_Vendor', text: 'Vendor', width: 100 },
                { field: 'DOM_Sloc', text: 'Sloc', width: 100 },
                { field: 'Packing_Status', text: 'Packing Status', width: 100 },
                {
                    field: 'DOM_STO_Delivery_Date', text: 'STO Delivery Date', width: 100, formatter: function (value) {
                        if (value) {
                            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                return '';
                            } else {

                                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                            }
                        }
                    }
                },
                {
                    field: 'DOM_STO_MA_Date', text: 'STO MA Date', width: 100, formatter: function (value) {
                        if (value) {
                            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                return '';
                            } else {

                                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                            }
                        }
                    }
                },

                { field: 'DOM_Mfr_City', text: 'Mfr City', width: 100 },
                { field: 'DOM_Route', text: 'Route', width: 100 },
                { field: 'DOM_Shipment_Number', text: 'Shipment Number', width: 100 },
                {
                    field: 'DOM_StatDelD', text: 'StatDelD', width: 100, formatter: function (value) {
                        if (value) {
                            if (eval("new " + value.substr(1, value.length - 2)).toLocaleDateString() == '1/1/1') {
                                return '';
                            } else {

                                return eval("new " + value.substr(1, value.length - 2)).toLocaleDateString();


                            }
                        }
                    }
                },

                { field: 'DOM_Inbound', text: 'Inbound', width: 100 },
                { field: 'DOM_Invoice', text: 'Invoice', width: 100 },
                { field: 'DOM_To_Be_Del', text: 'DOM To be del.', width: 100 },
                { field: 'DOM_Finaloadingport', text: 'Finaloadingport.', width: 100 },


                 { field: 'Created_By', text: 'Created by', width: 100 },


                { field: 'FOB_Receiving_Point', text: 'Receiving Point', width: 100 },






            ],
            onCheck: function (node, checked) {
                if (node.text == "Choose all") {
                    treeChecked(checked, "ddlLine");
                }
                //else {
                //    if (checked == false) {
                //        var basetree = $('#ddlLine').combotree('tree');
                //        var roots = basetree.tree('getRoots');//返回tree的所有根节点数组  

                //        var node = basetree.tree('find', 1);
                //        basetree.tree('uncheck', node.target);

                //    }
                //}

                //if (checked == true) {
                //    if (node.formatter != undefined) {
                //        searchcolumns.push({ field: node.field, title: node.text, width: node.width, formatter: node.formatter });

                //    } else {
                //        searchcolumns.push({ field: node.field, title: node.text, width: node.width });

                //    }
                //} else {
                //    searchcolumns.forEach(function (item, index, arr) {
                //        if (item.field == node.field) {
                //            arr.splice(index, 1);
                //        }
                //    });
                //}
                //让全选不显示
                $("#ddlLine").combotree("setText", "");
            },
            onClick: function (node, checked) {
                //让全选不显示
                $("#ddlLine").combotree("setText", "");
            }
        });

        $.fn.combotree.defaults.editable = true;
        $.extend($.fn.combotree.defaults.keyHandler, {
            up: function () {
                console.log('up');
            },
            down: function () {
                console.log('down');
                'a'.toUpperCase()
            },
            enter: function () {
                console.log('enter');
            },
            query: function (q) {
                var t = $(this).combotree('tree');
                t.tree('expandAll');
                var nodes = t.tree('getChildren');
                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];
                    if (node.text.toUpperCase().indexOf(q.toUpperCase()) >= 0) {
                        $(node.target).show();
                    } else {
                        $(node.target).hide();
                    }
                }
                var opts = $(this).combotree('options');
                if (!opts.hasSetEvents) {
                    opts.hasSetEvents = true;
                    var onShowPanel = opts.onShowPanel;
                    opts.onShowPanel = function () {
                        var nodes = t.tree('getChildren');
                        for (var i = 0; i < nodes.length; i++) {
                            $(nodes[i].target).show();
                        }
                        onShowPanel.call(this);
                    };
                    $(this).combo('options').onShowPanel = opts.onShowPanel;
                }
            }
        });

        var start_time = new Date();
        var end_time = new Date();
        start_time.setDate(start_time.getDate() - 7);
        $("#jrstartdate").datebox("setValue", myformatter(start_time));

        $("#jrenddate").datebox("setValue", myformatter(end_time));
        loadCustomer();
        //获取时间
        //var beginTime=$("#txtBeginTime").datebox("getValue");
        //var endTime=$("#txtEndTime").datebox("getValue");

        // alert(nowdate.toDateString());
        //  alert(nodate.getFullYear());
        //alert(nodate.getMonth());
        //alert(nowdate.getDate());
        //$('#startdate').datebox('setValue', nowdate.getMonth() + 1 + '-' + nowdate.getDate() + '-' + nowdate.getFullYear());
        // nowdate.setDate(nowdate.getDate() + 15);

        // $('#enddate').datebox('setValue', nowdate.getMonth() + 1 + '-' + nowdate.getDate() + '-' + nowdate.getFullYear());
        searchForm = $('#searchForm');
        dgBooking = $("#dgBooking").datagrid({
            iconCls: 'icon-save',
            fit: true,
            fitColumns: false,//提高新能
            autoRowHeight:false,
            rownumbers: true,
            nowrap: true, //如果为true，则在同一行中显示数据。设置为true可以提高加载性能。
            animate: false,
            border: false,
            singleSelect: true,
            loadMsg: 'Loading……',
            // idField: 'rId',
            //把表单元素序列化成对象
            queryParams: xz.serializeObject(searchForm),
            pagination: true,
            pageSize: 50,
            pageList: [50, 100, 150, 200, 250],
            url: '/OnlineBooking_Areas/LoadPlanQuery/getDailyReport',

            columns: [allcolumns],

            onRowContextMenu: function (e, rowIndex, rowData) {
                //e.preventDefault();
                //$(this).datagrid('unselectAll');
                //$(this).datagrid('selectRow', rowIndex);
                //$('#menu').menu('show', {
                //    left: e.pageX,
                //    top: e.pageY
                //});
            },

            onLoadSuccess: function (data) {
                var rows = $("#dgBooking").datagrid('getRows').length;

                if (rows >= 1) {
                    $('#dgBooking').datagrid('selectRow', 0);

                }
            }

        });
    });
    function treeChecked(selected, treeMenu) {
        var basetree = $('#ddlLine').combotree('tree');
        var roots = basetree.tree('getRoots');//返回tree的所有根节点数组  
        if (selected) {
            for (var x = 0; x < roots.length; x++) {
                if (roots[x].text == "Choose all") {
                    continue;
                }
                basetree.tree('check', roots[x].target);//将得到的节点选中  
            }
        } else {
            for (var x = 0; x < roots.length; x++) {
                if (roots[x].text == "Choose all") {
                    continue;
                }
                basetree.tree('uncheck', roots[x].target);
            }
        }
    }

    function loadCustomer() {
        $.post("/OnlineBooking_Areas/LoadPlanQuery/GetCustomerList", null, function (data, textStatus) {

            if (textStatus = "success") {
                $("#Customer").combobox({});
                $("#Customer").combobox({
                    data: data.Data,
                    valueField: 'cust_name',
                    textField: 'cust_name'
                });


            } else {

                alert('get customerlist false');
            }

        })
    }

    function changeTwoDecimal_f(x) {

        var f_x = parseFloat(x);
        //if (isNaN(f_x)) {
        //    alert('function:changeTwoDecimal->parameter error');
        //    return false;
        //}
        var f_x = Math.round(x * 100) / 100;
        var s_x = f_x.toString();
        var pos_decimal = s_x.indexOf('.');
        if (pos_decimal < 0) {
            pos_decimal = s_x.length;
            s_x += '.';
        }
        while (s_x.length <= pos_decimal + 2) {
            s_x += '0';
        }
        return s_x;
    }


    function myformatter(date) {
        var y = date.getFullYear();
        var m = date.getMonth() + 1;
        var d = date.getDate();
        return y + '-' + (m < 10 ? ('0' + m) : m) + '-' + (d < 10 ? ('0' + d) : d);
    }


    /*过滤角色信息*/
    function searchBooking() {
        //将form元素转换为数据对象
        // var aa = xz.serializeObject(searchForm);ee
        //获取当前combotree的tree对象
        var tree = $('#ddlLine').combotree('tree');
        //获取当前选中的节点
        var data = tree.tree('getChecked');
        searchcolumns = [];
        for (i = 0, len = data.length; i < len; i++) {
            if (data[i].text == "Choose all") {
                continue;
            }
            searchcolumns.push({ field: data[i].field, title: data[i].text, width: data[i].width, formatter: data[i].formatter });
        }
        //数组访问方式 jsonData[0].name
        //对象访问方式??aa.startdate

        //datagrid load 方法参数是一个数据对象
        
        dgBooking.datagrid('load', xz.serializeObject(searchForm));
        if (searchcolumns.length > 0) {
            dgBooking.datagrid({
                columns: [searchcolumns]
            });
        } else {
            dgBooking.datagrid({
                columns: [allcolumns]
            });
        }
    }


    function Export() {

        ////获取袭datagrid表格标题头
        var datagridTitle = "";
        var datagridFields = "";
        var fields = dgBooking.datagrid('getColumnFields');

        var colName = [];
        for (i = 0; i < fields.length; i++) {
            if (fields[i].text == "Choose all") {
                continue;
            }
            var col = dgBooking.datagrid("getColumnOption", fields[i]);
            if (i == fields.length - 1) {
                datagridTitle += col.title;
                datagridFields += fields[i];
                break;
            }
            datagridTitle += col.title + "+";
            datagridFields += fields[i] + "+";
        }
        
        $("#Radio_Title").val(datagridTitle);
        $("#Radio_Fields").val(datagridFields);

        $('#searchForm').attr('action', '/OnlineBooking_Areas/LoadPlanQuery/DailyReportChoiceExcelOut');

        //var formParam = {
        //    url: '/Login/LoginIn',
        //    success: dealWithLogin
        //}
        ///*把表单参数对象和表单元素结合起来*/
        //loginInputForm = $('#loginInputForm').form(formParam);
        document.getElementById("searchForm").submit();


    }




    function showPODdownloadView() {
        $.validateUrl('/OnlineBooking_Areas/LoadPlanQuery/PODDownload', showPODdownload, xz.dealWith, 'Get');
    }

    function showPODdownload() {

        var node2 = dgBooking.datagrid('getSelected');
        if (node2) {
            var pAddscan = xz.dialog({
                title: 'POD Download',
                width: 400,
                height: 300,
                cache: false,
                queryParams: {
                    //uID: node.b_key, RegID: node.RegDID
                },
                iconCls: 'icon-edit',

                href: '/OnlineBooking_Areas/LoadPlanQuery/PODDownload',
                buttons: [

                {
                    text: 'Close',
                    iconCls: 'icon-cancel',
                    handler: function () {
                        // pAddscan.dialog('close');

                        //var fm = pAddscan.find('form');
                        //var pScan_CTN = ff.find("#divScan_CTN").html();

                        //updateSelectedRowScanNumber(node2, pScan_CTN );

                        pAddscan.dialog('destroy');//销毁
                    }

                }

                ],
                onLoad: function () {
                    var ff = pAddscan.find('form');
                    var pdgPod = ff.find("#dgPod");
                    var pConsol = ff.find("#divConsol");
                    var parambarcode = { STO: node2.SalesOrd_STO, Item: node2.ItemNO, Consol: node2.Consol_no };
                    var optionsbarcode = pdgPod.datagrid('options');

                    pConsol.html(node2.Consol_no);
                    optionsbarcode.url = '/OnlineBooking_Areas/LoadPlanQuery/GetTKBooking';
                    optionsbarcode.queryParams = parambarcode;
                    pdgPod.datagrid(optionsbarcode);

                    //var ptxtBarcode = ff.find("#txtBarcode");
                    //ptxtBarcode.focus();
                },

                onClose: function () {

                    pAddscan.dialog('destroy');//销毁


                }

            });
        }

    }

</script>





<!DOCTYPE html>

<html>
<head>

    <meta name="viewport" content="width=device-width" />
    <title>KPIIndex</title>
</head>
<body class="easyui-layout" data-options="fit:true">
    <!--条件检索-->
    <div data-options="region:'north',title:'Filter Conditions',split:true,border:false,collapsed:false" style="height:150px;overflow:hidden;">
        <form id="searchForm" method="post" action="/OnlineBooking_Areas/LoadPlanQuery/DailyReportExcelOut">
            <div id="condition" class="container_12" style="position:relative; border:0px solid #880000">

                <div class="clear"></div>
                <div class="grid_1 lbl">Purch.Doc</div>
                <div class="grid_2 val"> <input class="easyui-textbox" id="Purch_Doc" name="Purch_Doc"></div>

                @*<div class="grid_1 lbl">Customer</div>
                    <div class="grid_2 val"> <input class="easyui-combobox" id="Customer" name="Customer" value=""></div>*@

                <div class="grid_1 lbl">Vendor name</div>
                <div class="grid_2 val"> <input class="easyui-textbox" id="Vendor_Name" name="Vendor_Name" value=""></div>
                
                <div class="clear"></div>
                <div class="grid_1 lbl"> Customer name</div>
                <div class="grid_2 val"> <input class="easyui-textbox" id="Customer_name" name="Customer_name"></div>



                <div class="grid_1 lbl">Item</div>
                <div class="grid_2 val"> <input class="easyui-textbox" id="Item" name="Item" value=""></div>
                <div class="clear"></div>

                <div class="grid_3 val"> Date Type:<input class="easyui-combobox" id="DateType" name="DateType" data-options="valueField: 'value',textField: 'label',data: [ {label: 'Loading Date',value: 'Loading Date'},{label: 'First Date',value: 'First Date'},{label: 'Cancel Date',value: 'Cancel Date'},{label: 'STO MA Date',value: 'STO MA Date'}]"></div>

                <div class="grid_1 lbl"> Select column</div>
                <div class="grid_2 val">
                    <input id="ddlLine" class="easyui-combotree" style="width: 205px; height: 24px;">

                    <input type="hidden" id="Radio_Title" name="Radio_Title" value="" />
                    <input type="hidden" id="Radio_Fields" name="Radio_Fields" value="" />
                </div>
                <div class="clear"></div>
                <div class="grid_2 val">From<input id="jrstartdate" name="jrstartdate" value="" class="easyui-datebox" style="width:120px"> </div>
                @*<div class="grid_1 lbl">To</div>*@
                <div class="grid_2 val">To<input id="jrenddate" name="jrenddate" value="" class="easyui-datebox" style="width:120px"> </div>

                <div class="grid_1 ">
                    <a href="javascript:void(0);" class="easyui-linkbutton" data-options="iconCls:'icon-search'" type="button" onclick="searchBooking();">Search</a>
                </div>
                <div class="grid_1 ">
                    <a href="javascript:void(0);" class="easyui-linkbutton" data-options="iconCls:'icon-export'" onclick="Export();">Export</a>
                </div>

                <div class="clear"></div>
            </div>
        </form>
    </div>
    <!--订单信息-->
    <div></div>
    <div data-options="region:'center',border:false" style="overflow:hidden;">
        <table id="dgBooking"></table>
    </div>
</body>
</html>
